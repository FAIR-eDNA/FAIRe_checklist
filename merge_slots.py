import os
import yaml
from collections import OrderedDict

# Path to the directory containing individual slot YAML files
SLOTS_DIR = "slots"
OUTPUT_SCHEMA = "schema.yaml"
GLOSSARY_FILENAME = "glossary_annotation.yaml"

# Base schema structure
schema = OrderedDict({
    "id": "tbd: a value like https://w3id.org/fairie/schema",
    "name": "faire_checklist",
    "description": "A LinkML schema representing the FAIRe checklist, rebuilt from individual slots.",
    "version": "0.6.0",
    "prefixes": {
        "linkml": "https://w3id.org/linkml/",
        "schema": "https://schema.org/",
        "dwc": "http://rs.tdwg.org/dwc/terms/",
        "mixs": "https://w3id.org/mixs/",
        "skos": "http://www.w3.org/2004/02/skos/core#"
    },
    "default_prefix": "faire",
    "imports": ["linkml:types"]
})

# Load glossary (if exists) and insert first
glossary_path = os.path.join(SLOTS_DIR, GLOSSARY_FILENAME)
if os.path.exists(glossary_path):
    with open(glossary_path, "r") as g:
        glossary_block = yaml.safe_load(g)
        schema["annotations"] = glossary_block.get("annotations", {})

# Initialize empty containers
schema["slots"] = OrderedDict()
schema["enums"] = OrderedDict()
schema["classes"] = {
    "MetadataChecklist": {
        "description": "A metadata record based on the FAIRe checklist.",
        "slots": []
    }
}

# Process all non-glossary YAML files alphabetically
slot_files = sorted(
    f for f in os.listdir(SLOTS_DIR)
    if f.endswith(".yaml") and f != GLOSSARY_FILENAME
)

for file_name in slot_files:
    slot_path = os.path.join(SLOTS_DIR, file_name)
    with open(slot_path, "r") as f:
        slot_content = yaml.safe_load(f)

        if "name" in slot_content:
            slot_name = slot_content["name"]
            schema["slots"][slot_name] = slot_content
            schema["classes"]["MetadataChecklist"]["slots"].append(slot_name)
        else:
            for slot_name, slot_def in slot_content.items():
                schema["slots"][slot_name] = slot_def
                schema["classes"]["MetadataChecklist"]["slots"].append(slot_name)

# Sort class slot list
schema["classes"]["MetadataChecklist"]["slots"].sort()

# Header comment
header_comment = (
    "# ============================\n"
    "# AUTO-GENERATED FILE\n"
    "# This file was automatically rebuilt from individual slot YAML files.\n"
    "# DO NOT EDIT THIS FILE BY HAND.\n"
    "# ============================\n\n"
)

# Save to disk
with open(OUTPUT_SCHEMA, "w") as f:
    f.write(header_comment)
    yaml.dump(schema, f, sort_keys=False, allow_unicode=True)

print(f"âœ… Merged schema written to {OUTPUT_SCHEMA}")
